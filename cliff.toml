# configuration file for git-cliff (0.1.0)
# TODO: Scopes for creatures: https://github.com/orhun/git-cliff#scoped

[changelog]
# changelog header
header = ""
# template for the changelog body
# https://tera.netlify.app/docs/#introduction
body = """
{% if version %}\
    ## Version [{{ version | trim_start_matches(pat="v") }}] - {{ timestamp | date(format="%Y-%m-%d") }}
{% else %}\
    ## [unreleased]
{% endif %}\
{% for group, commits in commits | group_by(attribute="group") %}
    ### {{ group | striptags | trim | upper_first }}
    {% for commit in commits %}
        - {{ commit.message | upper_first }}\
        {%- if commit.links %}\
            ({% for link in commit.links -%}\
                [{{link.text}}]({{link.href}})\
                {% if not loop.last %},{% endif %}\
            {% endfor -%})\
        {% endif %}\
    {% endfor %}
{% endfor %}\n
"""
# remove the leading and trailing whitespace from the template
trim = true
# changelog footer
footer = ""

[git]
# parse the commits based on https://www.conventionalcommits.org
conventional_commits = true
# filter out the commits that are not conventional
filter_unconventional = true
# regex for preprocessing the commit messages
commit_preprocessors = [
    { pattern = '\((\w+\s)?#([0-9]+)\)', replace = "([#${2}](https://github.com/UntitledCreatures/UntitledCreatureMod/issues/${2}))"},
]
# regex for parsing and grouping commits
commit_parsers = [
    { message = "^feat", group = "<!-- 0 -->Features" },
    { message = "^fix", group = "<!-- 1 -->Bug fixes" },
    { message = "^perf", group = "<!-- 2 -->Performance" },
    { message = "^doc", group = "<!-- 3 -->Documentation"},
    { message = "^chore", group = "<!-- 4 -->Miscellaneous", skip = true},
    { message = "^refactor", group = "Refactor"},
    { message = "^style", group = "Styling"},
    { message = "^test", group = "Testing"},
    { message = "^chore\\(release\\): prepare for", skip = true},
    { body = ".*security", group = "Security"},
]
# filter out the commits that are not matched by commit parsers
filter_commits = true
# glob pattern for matching git tags
tag_pattern = "v[0-9]*"
# regex for skipping tags
skip_tags = ""
# regex for ignoring tags
ignore_tags = ""
# sort the tags chronologically
date_order = false
# sort the commits inside sections by oldest/newest order
sort_commits = "oldest"

# parse links to issues in the
link_parsers = [{ pattern = "#(\\d+)", href = "https://github.com/UntitledCreatures/UntitledCreatureMod/issues/$1"}]
